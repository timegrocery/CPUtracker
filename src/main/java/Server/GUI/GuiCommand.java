/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Server.GUI;

import Server.ConnectedClient;
import Ultils.MessageType;
import Ultils.NetUtils;
import Ultils.Packet;
import Ultils.StringUltils;
import org.jfree.chart.util.StringUtils;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author dell
 */
public class GuiCommand extends javax.swing.JFrame {
    private ConnectedClient client;
    /**
     * Creates new form GuiCommand
     */
    public GuiCommand(ConnectedClient client) {
        this.client = client;
        setTitle(client.getUsername() + " Command Prompt");
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        initComponents();
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextArea1.setLineWrap(true);
        jTextArea1.setPreferredSize(new Dimension(700, 700));

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jTextPane1.setPreferredSize(new Dimension(700, 40));
        jTextPane1.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == 10) {
                    String command = jTextPane1.getText();
                    if (StringUltils.NormalizeSpaces(command).isEmpty() || StringUltils.NormalizeSpaces(command).isBlank()) {
                        jTextPane1.setText("");
                        return;
                    }
                    AddTextToArea(">" + command);
                    jTextPane1.setText("");

                    // send command
                    Packet packet = new Packet();
                    packet.action = MessageType.COMMAND.getID();
                    packet.data = new ArrayList<String>();
                    packet.data.add("execute");
                    packet.data.add(command);
                    try {
                        NetUtils.sendMessage(packet, client.getPrintWriter());
                    } catch (Exception exception) {
                        exception.printStackTrace();
                    }
                }
            }});
        jButton1 = new javax.swing.JButton();
        jButton1.setPreferredSize(new Dimension(100, 40));
        jButton1.setText("Send");
        jTextArea1.setText("");
        jButton1.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                String command = jTextPane1.getText();
                if (StringUltils.NormalizeSpaces(command).isEmpty() || StringUltils.NormalizeSpaces(command).isBlank()) {
                    jTextPane1.setText("");
                    return;
                }
                AddTextToArea(">" + command);
                jTextPane1.setText("");
                // send command
                Packet packet = new Packet();
                packet.action = MessageType.COMMAND.getID();
                packet.data = new ArrayList<String>();
                packet.data.add("execute");
                packet.data.add(command);
                packet.data.add("eof");
                try {
                    NetUtils.sendMessage(packet, client.getPrintWriter());
                } catch (Exception exception) {
                    exception.printStackTrace();
                }
            }
        });
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(25);
        jTextArea1.setRows(5000);
        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);
        jScrollPane2.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiCommand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiCommand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiCommand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiCommand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }// </editor-fold>//GEN-END:initComponents

    public void AddTextToArea(String txt) {
        StringBuilder currentTxt = new StringBuilder(this.jTextArea1.getText());
        currentTxt.append(System.lineSeparator());
        currentTxt.append(txt);
        this.jTextArea1.setText(currentTxt.toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
